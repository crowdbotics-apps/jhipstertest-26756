{"remainingRequest":"/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/node_modules/thread-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/node_modules/ts-loader/index.js??ruleSet[1].rules[0].use[2]!/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/src/main/webapp/app/modules/account/password-reset/password-reset.reducer.ts","dependencies":[{"path":"/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/src/main/webapp/app/modules/account/password-reset/password-reset.reducer.ts","mtime":1621189592441},{"path":"/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtamhpcHN0ZXInOwppbXBvcnQgeyBSRVFVRVNULCBTVUNDRVNTLCBGQUlMVVJFIH0gZnJvbSAnYXBwL3NoYXJlZC9yZWR1Y2Vycy9hY3Rpb24tdHlwZS51dGlsJzsKZXhwb3J0IGNvbnN0IEFDVElPTl9UWVBFUyA9IHsKICAgIFJFU0VUX1BBU1NXT1JEX0lOSVQ6ICdwYXNzd29yZFJlc2V0L1JFU0VUX1BBU1NXT1JEX0lOSVQnLAogICAgUkVTRVRfUEFTU1dPUkRfRklOSVNIOiAncGFzc3dvcmRSZXNldC9SRVNFVF9QQVNTV09SRF9GSU5JU0gnLAogICAgUkVTRVQ6ICdwYXNzd29yZFJlc2V0L1JFU0VUJywKfTsKY29uc3QgaW5pdGlhbFN0YXRlID0gewogICAgbG9hZGluZzogZmFsc2UsCiAgICByZXNldFBhc3N3b3JkU3VjY2VzczogZmFsc2UsCiAgICByZXNldFBhc3N3b3JkRmFpbHVyZTogZmFsc2UsCn07Ci8vIFJlZHVjZXIKZXhwb3J0IGRlZmF1bHQgKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pID0+IHsKICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHsKICAgICAgICBjYXNlIFJFUVVFU1QoQUNUSU9OX1RZUEVTLlJFU0VUX1BBU1NXT1JEX0ZJTklTSCk6CiAgICAgICAgY2FzZSBSRVFVRVNUKEFDVElPTl9UWVBFUy5SRVNFVF9QQVNTV09SRF9JTklUKToKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUpLCB7IGxvYWRpbmc6IHRydWUgfSk7CiAgICAgICAgY2FzZSBGQUlMVVJFKEFDVElPTl9UWVBFUy5SRVNFVF9QQVNTV09SRF9GSU5JU0gpOgogICAgICAgIGNhc2UgRkFJTFVSRShBQ1RJT05fVFlQRVMuUkVTRVRfUEFTU1dPUkRfSU5JVCk6CiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluaXRpYWxTdGF0ZSksIHsgbG9hZGluZzogZmFsc2UsIHJlc2V0UGFzc3dvcmRGYWlsdXJlOiB0cnVlIH0pOwogICAgICAgIGNhc2UgU1VDQ0VTUyhBQ1RJT05fVFlQRVMuUkVTRVRfUEFTU1dPUkRfRklOSVNIKToKICAgICAgICBjYXNlIFNVQ0NFU1MoQUNUSU9OX1RZUEVTLlJFU0VUX1BBU1NXT1JEX0lOSVQpOgogICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsU3RhdGUpLCB7IGxvYWRpbmc6IGZhbHNlLCByZXNldFBhc3N3b3JkU3VjY2VzczogdHJ1ZSB9KTsKICAgICAgICBjYXNlIEFDVElPTl9UWVBFUy5SRVNFVDoKICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGluaXRpYWxTdGF0ZSk7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgcmV0dXJuIHN0YXRlOwogICAgfQp9Owpjb25zdCBhcGlVcmwgPSAnYXBpL2FjY291bnQvcmVzZXQtcGFzc3dvcmQnOwovLyBBY3Rpb25zCmV4cG9ydCBjb25zdCBoYW5kbGVQYXNzd29yZFJlc2V0SW5pdCA9IG1haWwgPT4gKHsKICAgIHR5cGU6IEFDVElPTl9UWVBFUy5SRVNFVF9QQVNTV09SRF9JTklULAogICAgLy8gSWYgdGhlIGNvbnRlbnQtdHlwZSBpc24ndCBzZXQgdGhhdCB3YXksIGF4aW9zIHdpbGwgdHJ5IHRvIGVuY29kZSB0aGUgYm9keSBhbmQgdGh1cyBtb2RpZnkgdGhlIGRhdGEgc2VudCB0byB0aGUgc2VydmVyLgogICAgcGF5bG9hZDogYXhpb3MucG9zdChgJHthcGlVcmx9L2luaXRgLCBtYWlsLCB7IGhlYWRlcnM6IHsgWydDb250ZW50LVR5cGUnXTogJ3RleHQvcGxhaW4nIH0gfSksCiAgICBtZXRhOiB7CiAgICAgICAgc3VjY2Vzc01lc3NhZ2U6IHRyYW5zbGF0ZSgncmVzZXQucmVxdWVzdC5tZXNzYWdlcy5zdWNjZXNzJyksCiAgICB9LAp9KTsKZXhwb3J0IGNvbnN0IGhhbmRsZVBhc3N3b3JkUmVzZXRGaW5pc2ggPSAoa2V5LCBuZXdQYXNzd29yZCkgPT4gKHsKICAgIHR5cGU6IEFDVElPTl9UWVBFUy5SRVNFVF9QQVNTV09SRF9GSU5JU0gsCiAgICBwYXlsb2FkOiBheGlvcy5wb3N0KGAke2FwaVVybH0vZmluaXNoYCwgeyBrZXksIG5ld1Bhc3N3b3JkIH0pLAogICAgbWV0YTogewogICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiB0cmFuc2xhdGUoJ3Jlc2V0LmZpbmlzaC5tZXNzYWdlcy5zdWNjZXNzJyksCiAgICB9LAp9KTsKZXhwb3J0IGNvbnN0IHJlc2V0ID0gKCkgPT4gKHsKICAgIHR5cGU6IEFDVElPTl9UWVBFUy5SRVNFVCwKfSk7Cg=="},{"version":3,"file":"/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/src/main/webapp/app/modules/account/password-reset/password-reset.reducer.ts","sourceRoot":"","sources":["/Users/jesusviloria/Documents/Crowdbotics/APTariffs/misc/apptest_cb/jhipstertest-26756/backend/src/main/webapp/app/modules/account/password-reset/password-reset.reducer.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AAEjF,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,mBAAmB,EAAE,mCAAmC;IACxD,qBAAqB,EAAE,qCAAqC;IAC5D,KAAK,EAAE,qBAAqB;CAC7B,CAAC;AAEF,MAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,oBAAoB,EAAE,KAAK;IAC3B,oBAAoB,EAAE,KAAK;CAC5B,CAAC;AAIF,UAAU;AACV,eAAe,CAAC,QAA4B,YAAY,EAAE,MAAM,EAAsB,EAAE;IACtF,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,uCACK,KAAK,KACR,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,uCACK,YAAY,KACf,OAAO,EAAE,KAAK,EACd,oBAAoB,EAAE,IAAI,IAC1B;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC;QACjD,KAAK,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC;YAC5C,uCACK,YAAY,KACf,OAAO,EAAE,KAAK,EACd,oBAAoB,EAAE,IAAI,IAC1B;QACJ,KAAK,YAAY,CAAC,KAAK;YACrB,yBACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC;AAEF,MAAM,MAAM,GAAG,4BAA4B,CAAC;AAE5C,UAAU;AACV,MAAM,CAAC,MAAM,uBAAuB,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;IAC9C,IAAI,EAAE,YAAY,CAAC,mBAAmB;IACtC,yHAAyH;IACzH,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,OAAO,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,cAAc,CAAC,EAAE,YAAY,EAAE,EAAE,CAAC;IAC5F,IAAI,EAAE;QACJ,cAAc,EAAE,SAAS,CAAC,gCAAgC,CAAC;KAC5D;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,GAAG,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;IAC9D,IAAI,EAAE,YAAY,CAAC,qBAAqB;IACxC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,SAAS,EAAE,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC;IAC7D,IAAI,EAAE;QACJ,cAAc,EAAE,SAAS,CAAC,+BAA+B,CAAC;KAC3D;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,CAAC","sourcesContent":["import axios from 'axios';\nimport { translate } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  RESET_PASSWORD_INIT: 'passwordReset/RESET_PASSWORD_INIT',\n  RESET_PASSWORD_FINISH: 'passwordReset/RESET_PASSWORD_FINISH',\n  RESET: 'passwordReset/RESET',\n};\n\nconst initialState = {\n  loading: false,\n  resetPasswordSuccess: false,\n  resetPasswordFailure: false,\n};\n\nexport type PasswordResetState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: PasswordResetState = initialState, action): PasswordResetState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case REQUEST(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...state,\n        loading: true,\n      };\n    case FAILURE(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case FAILURE(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...initialState,\n        loading: false,\n        resetPasswordFailure: true,\n      };\n    case SUCCESS(ACTION_TYPES.RESET_PASSWORD_FINISH):\n    case SUCCESS(ACTION_TYPES.RESET_PASSWORD_INIT):\n      return {\n        ...initialState,\n        loading: false,\n        resetPasswordSuccess: true,\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState,\n      };\n    default:\n      return state;\n  }\n};\n\nconst apiUrl = 'api/account/reset-password';\n\n// Actions\nexport const handlePasswordResetInit = mail => ({\n  type: ACTION_TYPES.RESET_PASSWORD_INIT,\n  // If the content-type isn't set that way, axios will try to encode the body and thus modify the data sent to the server.\n  payload: axios.post(`${apiUrl}/init`, mail, { headers: { ['Content-Type']: 'text/plain' } }),\n  meta: {\n    successMessage: translate('reset.request.messages.success'),\n  },\n});\n\nexport const handlePasswordResetFinish = (key, newPassword) => ({\n  type: ACTION_TYPES.RESET_PASSWORD_FINISH,\n  payload: axios.post(`${apiUrl}/finish`, { key, newPassword }),\n  meta: {\n    successMessage: translate('reset.finish.messages.success'),\n  },\n});\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET,\n});\n"]}]}